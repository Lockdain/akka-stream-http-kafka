###################################
# akka-http Reference Config File #
###################################

# This is the reference config file that contains all the default settings.
# Make your edits/overrides in your application.conf.
akka {
  loglevel = "DEBUG"
    actor {
        creation-timeout = 20s

        debug {
            fsm = on
        }
    }

    logger-startup-timeout = 5s
    log-dead-letters = 10

    default-mailbox {

          # If the mailbox is bounded then it uses this setting to determine its
          # capacity. The provided value must be positive.
          # NOTICE:
          # Up to version 2.1 the mailbox type was determined based on this setting;
          # this is no longer the case, the type must explicitly be a bounded mailbox.
          mailbox-capacity = 1000

          # If the mailbox is bounded then this is the timeout for enqueueing
          # in case the mailbox is full. Negative values signify infinite
          # timeout, which should be avoided as it bears the risk of dead-lock.
          mailbox-push-timeout-time = 10s
        }

        debug {
              # enable function of Actor.loggable(), which is to log any received message
              # at DEBUG level, see the “Testing Actor Systems” section of the Akka
              # Documentation at http://akka.io/docs
              receive = off

              # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill etc.)
              autoreceive = off

              # enable DEBUG logging of actor lifecycle changes
              lifecycle = on

              # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
              fsm = off

              # enable DEBUG logging of subscription changes on the eventStream
              event-stream = off

              # enable DEBUG logging of unhandled messages
              unhandled = off

              # enable WARN logging of misconfigured routers
              router-misconfiguration = off
            }
}

akka.http {
  routing {
    # Enables/disables the returning of more detailed error messages to the
    # client in the error response
    # Should be disabled for browser-facing APIs due to the risk of XSS attacks
    # and (probably) enabled for internal or non-browser APIs
    # (Note that akka-http will always produce log messages containing the full error details)
    verbose-error-messages = on

    loglevel = "DEBUG"

    # Enables/disables ETag and `If-Modified-Since` support for FileAndResourceDirectives
    file-get-conditional = on

    # Enables/disables the rendering of the "rendered by" footer in directory listings
    render-vanity-footer = yes

    # The maximum size between two requested ranges. Ranges with less space in between will be coalesced.
    #
    # When multiple ranges are requested, a server may coalesce any of the ranges that overlap or that are separated
    # by a gap that is smaller than the overhead of sending multiple parts, regardless of the order in which the
    # corresponding byte-range-spec appeared in the received Range header field. Since the typical overhead between
    # parts of a multipart/byteranges payload is around 80 bytes, depending on the selected representation's
    # media type and the chosen boundary parameter length, it can be less efficient to transfer many small
    # disjoint parts than it is to transfer the entire selected representation.
    range-coalescing-threshold = 80

    # The maximum number of allowed ranges per request.
    # Requests with more ranges will be rejected due to DOS suspicion.
    range-count-limit = 16

    # The maximum number of bytes per ByteString a decoding directive will produce
    # for an entity data stream.
    decode-max-bytes-per-chunk = 1m

    # Maximum content length after applying a decoding directive. When the directive
    # decompresses, for example, an entity compressed with gzip, the resulting stream can be much
    # larger than the max-content-length. Like with max-content-length, this is not necessarilly a
    # problem when consuming the entity in a streaming fashion, but does risk high memory use
    # when the entity is made strict or marshalled into an in-memory object.
    # This limit (like max-content-length) can be overridden on a case-by-case basis using the
    # withSizeLimit directive.
    decode-max-size = 8m
  }

  # server-sent events
  sse {
    # The maximum size for parsing server-sent events.
    max-event-size = 8192

    # The maximum size for parsing lines of a server-sent event.
    max-line-size = 4096
  }
}

